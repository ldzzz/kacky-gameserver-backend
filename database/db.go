// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUpdatePlayerStmt, err = db.PrepareContext(ctx, createUpdatePlayer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUpdatePlayer: %w", err)
	}
	if q.createUpdatePlayerMapFinishStmt, err = db.PrepareContext(ctx, createUpdatePlayerMapFinish); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUpdatePlayerMapFinish: %w", err)
	}
	if q.createUpdateServerStmt, err = db.PrepareContext(ctx, createUpdateServer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUpdateServer: %w", err)
	}
	if q.createUpdateStreamDataTM20Stmt, err = db.PrepareContext(ctx, createUpdateStreamDataTM20); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUpdateStreamDataTM20: %w", err)
	}
	if q.createUpdateStreamDataTMNFStmt, err = db.PrepareContext(ctx, createUpdateStreamDataTMNF); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUpdateStreamDataTMNF: %w", err)
	}
	if q.getMapByUidStmt, err = db.PrepareContext(ctx, getMapByUid); err != nil {
		return nil, fmt.Errorf("error preparing query GetMapByUid: %w", err)
	}
	if q.getMapSortedRecordsStmt, err = db.PrepareContext(ctx, getMapSortedRecords); err != nil {
		return nil, fmt.Errorf("error preparing query GetMapSortedRecords: %w", err)
	}
	if q.getPlayerStmt, err = db.PrepareContext(ctx, getPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayer: %w", err)
	}
	if q.getPlayerFinishesStmt, err = db.PrepareContext(ctx, getPlayerFinishes); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerFinishes: %w", err)
	}
	if q.getPlayerMapFinishStmt, err = db.PrepareContext(ctx, getPlayerMapFinish); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerMapFinish: %w", err)
	}
	if q.getPlayerMetadataStmt, err = db.PrepareContext(ctx, getPlayerMetadata); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayerMetadata: %w", err)
	}
	if q.getServerByLoginStmt, err = db.PrepareContext(ctx, getServerByLogin); err != nil {
		return nil, fmt.Errorf("error preparing query GetServerByLogin: %w", err)
	}
	if q.getServersStmt, err = db.PrepareContext(ctx, getServers); err != nil {
		return nil, fmt.Errorf("error preparing query GetServers: %w", err)
	}
	if q.setPlayerRoleStmt, err = db.PrepareContext(ctx, setPlayerRole); err != nil {
		return nil, fmt.Errorf("error preparing query SetPlayerRole: %w", err)
	}
	if q.updateMapPlaytimeStmt, err = db.PrepareContext(ctx, updateMapPlaytime); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMapPlaytime: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUpdatePlayerStmt != nil {
		if cerr := q.createUpdatePlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUpdatePlayerStmt: %w", cerr)
		}
	}
	if q.createUpdatePlayerMapFinishStmt != nil {
		if cerr := q.createUpdatePlayerMapFinishStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUpdatePlayerMapFinishStmt: %w", cerr)
		}
	}
	if q.createUpdateServerStmt != nil {
		if cerr := q.createUpdateServerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUpdateServerStmt: %w", cerr)
		}
	}
	if q.createUpdateStreamDataTM20Stmt != nil {
		if cerr := q.createUpdateStreamDataTM20Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUpdateStreamDataTM20Stmt: %w", cerr)
		}
	}
	if q.createUpdateStreamDataTMNFStmt != nil {
		if cerr := q.createUpdateStreamDataTMNFStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUpdateStreamDataTMNFStmt: %w", cerr)
		}
	}
	if q.getMapByUidStmt != nil {
		if cerr := q.getMapByUidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMapByUidStmt: %w", cerr)
		}
	}
	if q.getMapSortedRecordsStmt != nil {
		if cerr := q.getMapSortedRecordsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMapSortedRecordsStmt: %w", cerr)
		}
	}
	if q.getPlayerStmt != nil {
		if cerr := q.getPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerStmt: %w", cerr)
		}
	}
	if q.getPlayerFinishesStmt != nil {
		if cerr := q.getPlayerFinishesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerFinishesStmt: %w", cerr)
		}
	}
	if q.getPlayerMapFinishStmt != nil {
		if cerr := q.getPlayerMapFinishStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerMapFinishStmt: %w", cerr)
		}
	}
	if q.getPlayerMetadataStmt != nil {
		if cerr := q.getPlayerMetadataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerMetadataStmt: %w", cerr)
		}
	}
	if q.getServerByLoginStmt != nil {
		if cerr := q.getServerByLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServerByLoginStmt: %w", cerr)
		}
	}
	if q.getServersStmt != nil {
		if cerr := q.getServersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServersStmt: %w", cerr)
		}
	}
	if q.setPlayerRoleStmt != nil {
		if cerr := q.setPlayerRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setPlayerRoleStmt: %w", cerr)
		}
	}
	if q.updateMapPlaytimeStmt != nil {
		if cerr := q.updateMapPlaytimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMapPlaytimeStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	createUpdatePlayerStmt          *sql.Stmt
	createUpdatePlayerMapFinishStmt *sql.Stmt
	createUpdateServerStmt          *sql.Stmt
	createUpdateStreamDataTM20Stmt  *sql.Stmt
	createUpdateStreamDataTMNFStmt  *sql.Stmt
	getMapByUidStmt                 *sql.Stmt
	getMapSortedRecordsStmt         *sql.Stmt
	getPlayerStmt                   *sql.Stmt
	getPlayerFinishesStmt           *sql.Stmt
	getPlayerMapFinishStmt          *sql.Stmt
	getPlayerMetadataStmt           *sql.Stmt
	getServerByLoginStmt            *sql.Stmt
	getServersStmt                  *sql.Stmt
	setPlayerRoleStmt               *sql.Stmt
	updateMapPlaytimeStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		createUpdatePlayerStmt:          q.createUpdatePlayerStmt,
		createUpdatePlayerMapFinishStmt: q.createUpdatePlayerMapFinishStmt,
		createUpdateServerStmt:          q.createUpdateServerStmt,
		createUpdateStreamDataTM20Stmt:  q.createUpdateStreamDataTM20Stmt,
		createUpdateStreamDataTMNFStmt:  q.createUpdateStreamDataTMNFStmt,
		getMapByUidStmt:                 q.getMapByUidStmt,
		getMapSortedRecordsStmt:         q.getMapSortedRecordsStmt,
		getPlayerStmt:                   q.getPlayerStmt,
		getPlayerFinishesStmt:           q.getPlayerFinishesStmt,
		getPlayerMapFinishStmt:          q.getPlayerMapFinishStmt,
		getPlayerMetadataStmt:           q.getPlayerMetadataStmt,
		getServerByLoginStmt:            q.getServerByLoginStmt,
		getServersStmt:                  q.getServersStmt,
		setPlayerRoleStmt:               q.setPlayerRoleStmt,
		updateMapPlaytimeStmt:           q.updateMapPlaytimeStmt,
	}
}
